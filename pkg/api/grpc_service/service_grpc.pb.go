// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/api/grpc_service/service.proto

package grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WaistService_SetWaists_FullMethodName     = "/grpc_service.WaistService/SetWaists"
	WaistService_GetLastWaists_FullMethodName = "/grpc_service.WaistService/GetLastWaists"
	WaistService_CreateUser_FullMethodName    = "/grpc_service.WaistService/CreateUser"
	WaistService_GetUser_FullMethodName       = "/grpc_service.WaistService/GetUser"
)

// WaistServiceClient is the client API for WaistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaistServiceClient interface {
	SetWaists(ctx context.Context, in *SetWaistsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLastWaists(ctx context.Context, in *GetLastWaistsRequest, opts ...grpc.CallOption) (*GetLastWaistsResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type waistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaistServiceClient(cc grpc.ClientConnInterface) WaistServiceClient {
	return &waistServiceClient{cc}
}

func (c *waistServiceClient) SetWaists(ctx context.Context, in *SetWaistsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WaistService_SetWaists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waistServiceClient) GetLastWaists(ctx context.Context, in *GetLastWaistsRequest, opts ...grpc.CallOption) (*GetLastWaistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLastWaistsResponse)
	err := c.cc.Invoke(ctx, WaistService_GetLastWaists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waistServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, WaistService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waistServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, WaistService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaistServiceServer is the server API for WaistService service.
// All implementations must embed UnimplementedWaistServiceServer
// for forward compatibility.
type WaistServiceServer interface {
	SetWaists(context.Context, *SetWaistsRequest) (*emptypb.Empty, error)
	GetLastWaists(context.Context, *GetLastWaistsRequest) (*GetLastWaistsResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	mustEmbedUnimplementedWaistServiceServer()
}

// UnimplementedWaistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWaistServiceServer struct{}

func (UnimplementedWaistServiceServer) SetWaists(context.Context, *SetWaistsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWaists not implemented")
}
func (UnimplementedWaistServiceServer) GetLastWaists(context.Context, *GetLastWaistsRequest) (*GetLastWaistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastWaists not implemented")
}
func (UnimplementedWaistServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedWaistServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedWaistServiceServer) mustEmbedUnimplementedWaistServiceServer() {}
func (UnimplementedWaistServiceServer) testEmbeddedByValue()                      {}

// UnsafeWaistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaistServiceServer will
// result in compilation errors.
type UnsafeWaistServiceServer interface {
	mustEmbedUnimplementedWaistServiceServer()
}

func RegisterWaistServiceServer(s grpc.ServiceRegistrar, srv WaistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWaistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WaistService_ServiceDesc, srv)
}

func _WaistService_SetWaists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWaistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaistServiceServer).SetWaists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaistService_SetWaists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaistServiceServer).SetWaists(ctx, req.(*SetWaistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaistService_GetLastWaists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastWaistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaistServiceServer).GetLastWaists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaistService_GetLastWaists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaistServiceServer).GetLastWaists(ctx, req.(*GetLastWaistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaistService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaistServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaistService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaistServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaistService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaistServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaistService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaistServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WaistService_ServiceDesc is the grpc.ServiceDesc for WaistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.WaistService",
	HandlerType: (*WaistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetWaists",
			Handler:    _WaistService_SetWaists_Handler,
		},
		{
			MethodName: "GetLastWaists",
			Handler:    _WaistService_GetLastWaists_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _WaistService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _WaistService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/grpc_service/service.proto",
}
